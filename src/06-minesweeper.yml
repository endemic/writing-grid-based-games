title: Game #5: Minesweeper
author: Nathan Demick
description: Make a "Minesweeper" game with Waffle
content: |
  One of the classic time-wasting games that lots of people have fond memories of is Minesweeper; particularly the [Microsoft version](https://en.wikipedia.org/wiki/Microsoft_Minesweeper). Since it was included in Windows 3.1, it was one of those games that you could always count on when you might have access to an unfamiliar PC. Although, I have a personal confession: I always played Solitaire or Hearts, rather than Minesweeper. I never took the time to really learn how to play the game! Nevertheless, Minesweeper is a classic example of a grid-based game, and one that is a great candidate for re-implementing yourself.

  As far as the rules go, the game is actually pretty simple. You've got a grid, with randomly placed "mines." The mines are hidden by an overlay. Clicking one of the hidden grid cells will reveal what's underneath. If it's a mine, you lose. If it's a number, that means there are that many mines in the eight neighboring spaces. If it's blank, then all neighboring blank spaces are revealed. The gist is to try to reveal the game state by logically using the clues.

  Making a version of Minesweeper with Waffle uses two grid "layers." The first grid is what's actually displayed to the player -- basically storing which "unknown" spaces have been clicked. The second grid stores the location of the mines and hints. For a simple 5x5 game board, the following is a representation of what the `mines` grid would look like.

  ```
  [1][1][1][ ][ ]
  [1][*][2][ ][ ]
  [1][2][*][1][ ]
  [ ][1][1][2][1]
  [ ][ ][ ][1][*]
  ```

  We'll start by making a 10x10 version of the game; increasing the board size can be left as an exercise for the reader. The first step is to [download Waffle](https://github.com/endemic/waffle/releases/latest) and open up `main.css`. We'll go ahead and add graphics for the various game objects that we plan to use in the game.

  <pre><code class="language-diff-css diff-highlight">#grid {
    /* ... */

  -  .highlight {
  -    background-color: blueviolet;
  -  }

  + .unknown { background-image: url('images/unknown.png'); }
  + .mine { background-image: url('images/mine.png'); }
  + .empty { background-image: url('images/empty.png'); }
  + .one { background-image: url('images/one.png'); }
  + .two { background-image: url('images/two.png'); }
  + .three { background-image: url('images/three.png'); }
  + .four { background-image: url('images/four.png'); }
  + .five { background-image: url('images/five.png'); }
  + .six { background-image: url('images/six.png'); }
  }</code></pre>

   ```css

  ```


  ```javascript
  const init = () => {
    // change these values to make a larger/smaller game board
    const rows = 10;
    const columns = 10;

    Waffle.init(rows, columns);

    // minesweeper has two grids used to hold data
    // 1. what's visible to the player (`displayState`)
    // 2. position of the mines/hints (`mineState`)

    // initialize the display grid with `unknown`
    Waffle.fill('unknown');

    // copy Waffle's 10x10 array; use to store mine locations
    const mines = Waffle.state;

    // more mines == harder
    const mineCount = 10;

    // randomly place the mines
    for (let i = 0; i < mineCount; i += 1) {
      let p = Waffle.randomPoint;

      while (!Waffle.isEmpty(mines[p.x][p.y])) {
        p = Waffle.randomPoint;
      }

      mines[p.x][p.y] = 'mine';
    }

    // Now that mines are placed, loop through to determine
    // numeric hints. Note the inverted x/y loops
    for (let y = 0; y < rows; y += 1) {
      for (let x = 0; x < columns; x += 1) {

        // Skip cells that contain mines
        if (mines[x][y] === 'mine') {
          continue;
        }

        // Find the number of mines contained in neighboring cells
        const hint = Waffle.getNeighbors({ x, y }, true)     // positions of 8 surrounding spaces
                          .filter(({ x, y }) => mines[x][y] === 'mine') // keep the spaces that have mines
                          .length;                                          // count how many there are

        const numberMap = {
          0: 'empty',
          1: 'one',
          2: 'two',
          3: 'three',
          4: 'four',
          5: 'five',
          6: 'sixe',
        };

        // now we can store the hint number; aka how many mines surround the square
        mines[x][y] = numberMap[hint];
      }
    }
  ```



  ```
  Waffle.onPointDown(({x, y}) => {
    if (mineState[x][y] === 'mine') {
      // u lose
    }

    const nextState = reveal({x, y}, Waffle.state);

    Waffle.state = nextState;

    if (hasWonGame()) {
      // u win
    }
  });
