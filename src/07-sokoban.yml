title: Game  &#35;7&#58; Sokoban
author: Nathan Demick
description: Make a "Sokoban" game with Waffle
content: |
  [Sokoban](https://en.wikipedia.org/wiki/Sokoban) is yet another classic casual game genre. You control a warehouse worker who must organize boxes by pushing them to certain locations. The difficulty is to not get a box stuck by pushing it against the wall or into a corner. As a kid, I played games with similar mechanics, such as [Rodent's Revenge](https://en.wikipedia.org/wiki/Rodent's_Revenge). These sorts of games are easily made with Waffle, as they limit movement to within a grid. Let's go ahead and figure out how to make a basic sokoban game.

  As always, [download the Waffle source](https://github.com/endemic/waffle/releases/latest), which has a `game.js` template file with some example code. You can then open the `index.html` file (**File &rarr; Open File &rarr; index.html**) in a browser and have the game run instantly.

  The template is set up to initialize a 10x10 grid. This is a reasonable size for a basic sokoban level, so we'll keep those dimensions. The first step in making the game will be to draw walls in the level. You should know the drill by now &mdash; any string you store in the grid will be used as a CSS class in the resulting HTML. So any image you want to represent a game object should have a rule in the `main.css` file.

  <pre><code class="language-diff-css diff-highlight">#grid {
    /* omitted for brevity */

    - .highlight {
    -   background-color: blueviolet;
    - }
    + .wall {
    +   background: url('wall.png') center/100%;
    + }
  }</code></pre>

  Make your own graphics if you want, otherwise you can [download some.](assets/sokoban/images.zip)

  Now we have to figure out what we want the level to look like. I guess normally you'd have some sort of fancy data structure for storing levels, but here we're gonna just use a 2D array. One benefit of this is being able to edit the level directly in your source file. In this array, a space will be an empty area, and a `#` will be a wall. After the call to `Waffle.init`, add the level data.

  <pre><code class="language-diff-javascript diff-highlight">Waffle.init(rows, columns);

  // hard code the level
  + const level = [
  +   ['#','#','#','#','#',' ',' ',' ',' ',' '],
  +   ['#',' ',' ',' ','#',' ','#','#','#',' '],
  +   ['#',' ',' ',' ','#',' ','#',' ','#',' '],
  +   ['#',' ',' ',' ','#',' ','#',' ','#',' '],
  +   ['#','#','#',' ','#','#','#',' ','#',' '],
  +   [' ','#','#',' ',' ',' ',' ',' ','#',' '],
  +   [' ','#',' ',' ',' ','#',' ',' ','#',' '],
  +   [' ','#',' ',' ',' ','#','#','#','#',' '],
  +   [' ','#','#','#','#','#',' ',' ',' ',' '],
  +   [' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
  + ];</code></pre>

  Now we need to take that data and display it in the game, by injecting it into Waffle's grid. We're converting the `#` symbol into the string `'wall'`, just so that it's easier to see how the level will look when each grid cell is a single character. To do that we'll loop over each (x,y) position of the level data, and set the corresponding value in Waffle's `state`. After the `level` variable, add the following:

  <pre><code class="language-diff-javascript diff-highlight">+ const nextState = Waffle.state;

  + for (let x = 0; x < Waffle.columns; x += 1) {
  +   for (let y = 0; y < Waffle.rows; y += 1) {
  +     const cell = level[x][y];
  +
  +     // evaluate the simplifed text contents of the
  +     // level data and set the state of the grid
  +     switch (cell) {
  +       case '#':
  +         nextState[x][y] = 'wall';
  +         break;
  +   }
  + }
  +
  + Waffle.state = nextState;</code></pre>

  Save the `game.js` file and reload the `index.html` file in your browser, and you should see the level displayed!

  <figure>
    <img src="assets/sokoban/example_1.png" alt="walls created">
    <figcaption>walls created</figcaption>
  </figure>

  But wait... something's not quite right. We were expecting the level to look the same as what we created in the code, but it looks like it's been rotated 90 degrees and flipped vertically. The reason behind this is because of the way we represent 2D arrays in code. Looping over the array twice with `x` and `y` variables accesses them like this:

  <pre><code>
    [
      [x=0,y=0],[x=0,y=1],[x=0,y=2],[x=0,y=3],
      [x=1,y=0],[x=1,y=1],[x=1,y=2],[x=1,y=3],
      [x=2,y=0],[x=2,y=1],[x=2,y=2],[x=2,y=3],
      [x=3,y=0],[x=3,y=1],[x=3,y=2],[x=3,y=3],
    ]
  </code></pre>

  You can see that this loop inverts the `(x, y)` values. We can solve the problem in one of two ways.

  <pre><code class="language-diff-javascript diff-highlight">- for (let x = 0; x < Waffle.columns; x += 1) {
  -   for (let y = 0; y < Waffle.rows; y += 1) {
  // change the order of the loops
  + for (let y = 0; y < Waffle.rows; y += 1) {
  +   for (let x = 0; x < Waffle.columns; x += 1) {
  -     const cell = level[x][y];
  // _OR_ change the order of the array indexing
  +     const cell = level[y][x];

      // evaluate the simplifed text contents of the
      // level data and set the state of the grid
      switch (cell) {
        case '#':
          nextState[x][y] = 'wall';
          break;
    }
  }</code></pre>

  Waffle uses the first solution when mapping its `state` variable to the HTML on the page, so we can use `x` and `y` to access grid values like you would expect.

  The next thing we can add is the player. We'll take a page out of [roguelike games](https://en.wikipedia.org/wiki/Roguelike) and use `@` to represent the player's starting location in the level.

  <pre><code class="language-diff-javascript diff-highlight">const level = [
    ['#','#','#','#','#',' ',' ',' ',' ',' '],
  - ['#',' ',' ',' ','#',' ','#','#','#',' '],
  + ['#','@',' ',' ','#',' ','#','#','#',' '],
    ['#',' ',' ',' ','#',' ','#',' ','#',' '],
    ['#',' ',' ',' ','#',' ','#',' ','#',' '],
    ['#','#','#',' ','#','#','#',' ','#',' '],
    [' ','#','#',' ',' ',' ',' ',' ','#',' '],
    [' ','#',' ',' ',' ','#',' ',' ','#',' '],
    [' ','#',' ',' ',' ','#','#','#','#',' '],
    [' ','#','#','#','#','#',' ',' ',' ',' '],
    [' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
  ];</code></pre>

  Now we need to handle the `@` value in the code that parses the level. We'll also create a new variable, `player`, that is a reference to the player's current position. It would be tedious if every time we wanted to move the player, we had to search the entire grid to find the cell that contained the `'player'` value.

  <pre><code class="language-diff-javascript diff-highlight">+ const player = {x: 0, y: 0};
  +
  for (let y = 0; y < Waffle.rows; y += 1) {
    for (let x = 0; x < Waffle.columns; x += 1) {
      const cell = level[x][y];

      // evaluate the simplifed text contents of the
      // level data and set the state of the grid
      switch (cell) {
        case '#':
          nextState[x][y] = 'wall';
          break;
  +     case '@':
  +       nextState[x][y] = 'player';
  +       player.x = x;
  +       player.y = y;
  +       break;
    }
  }</code></pre>

  Of course this means we also need to create a CSS rule to display the "player" graphic.

  <pre><code class="language-diff-css diff-highlight">#grid {
    /* omitted for brevity */

    .wall {
      background: url('wall.png') center/100%;
    }
  + .player {
  +   background: url('player.png') center/100%;
  + }
  }</code></pre>

  Reload, and the player should appear in the level.

  <!-- graphic here -->

  Now we need to move the player around. To that end, we'll add some code to the `Waffle.onKeyDown` callback function that's already in `game.js`. Normally when updating a player object, we'd just directly change its `(x, y)` values. But since I know a little more about the functionality we have to write next, we're going to start off making things slightly more complicated. The reason for this is that we need to take box-pushing into account. If the player moves into a box, we want to move the box to the next open space. But in order to do that, we need to know the direction the player is moving; e.g. it's easier to add a `{x: 0, y: 1}` value to both the player _and_ the box, rather than have to determine that same value after each movement by subtracting the player's new position from the old.

  <pre><code class="language-diff-javascript diff-highlight">Waffle.onKeyDown(({ key }) => {
  - console.log(`pressed ${key}`);
  + const move = {x: 0, y: 0};
  +
  + switch (key) {
  +   case 'w':
  +     move.y -= 1;
  +     break;
  +   case 's':
  +     move.y += 1;
  +     break;
  +   case 'a':
  +     move.x -= 1;
  +     break;
  +   case 'd':
  +     move.x += 1;
  +     break;
  + }
  +
  + const playerNext = {
  +   x: player.x + move.x,
  +   y: player.y + move.y
  + };
  +
  + const state = Waffle.state;
  +
  + // remove from the old position
  + state[player.x][player.y] = '';
  +
  + // update position data
  + player.x = playerNext.x;
  + player.y = playerNext.y;
  +
  + // put player in new position
  + state[player.x][player.y] = 'player';
  +
  + // update the game
  + Waffle.state = state;
  });</code></pre>

  You can see here that we take keyboard input from `w`, `a`, `s`, `d` and determine a `move` vector based on that. Then we can calculate the player's next position, and update the display.

  <!-- image here -->

  You'll notice, of course, that the player can move through walls, destroying them at the same time. Before blindly moving the player, we can check to see if the destination contains a wall. Let's add a condition to check if the new position already had an object in it using `Waffle.isEmpty`.

  <pre><code class="language-diff-javascript diff-highlight">const state = Waffle.state;

  + if (Waffle.isEmpty(state[playerNext.x][playerNext.y])) {
      // remove from the old position
      state[player.x][player.y] = '';

      // update position data
      player.x = playerNext.x;
      player.y = playerNext.y;

      // put player in new position
      state[player.x][player.y] = 'player';
  + }

  // update the game
  Waffle.state = state;</code></pre>

  Save the source file, reload the page, and voilà! Now the player is blocked by walls, as we would expect.

  <!-- image -->

  Next, let's add boxes! Hoo boy, things are getting exciting now! Use `B` to represent a Box. We'll create three of them in this level.

  <pre><code class="language-diff-javascript diff-highlight">const level = [
    ['#','#','#','#','#',' ',' ',' ',' ',' '],
    ['#',' ',' ',' ','#',' ','#','#','#',' '],
    ['#','@',' ',' ','#',' ','#','#','#',' '],
  - ['#',' ',' ',' ','#',' ','#','x','#',' '],
  - ['#',' ',' ',' ','#',' ','#','x','#',' '],
  + ['#',' ','B','B','#',' ','#','x','#',' '],
  + ['#',' ','B',' ','#',' ','#','x','#',' '],
    ['#','#','#',' ','#','#','#',' ','#',' '],
    [' ','#','#',' ',' ',' ',' ',' ','#',' '],
    [' ','#',' ',' ',' ','#',' ',' ','#',' '],
    [' ','#',' ',' ',' ','#','#','#','#',' '],
    [' ','#','#','#','#','#',' ',' ',' ',' '],
    [' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
  ];</code></pre>

  Update the level parsing code to recognize the `B` character as a box.

  <pre><code class="language-diff-javascript diff-highlight">for (let y = 0; y < Waffle.rows; y += 1) {
    for (let x = 0; x < Waffle.columns; x += 1) {
      const cell = level[x][y];

      // evaluate the simplifed text contents of the
      // level data and set the state of the grid
      switch (cell) {
        case '#':
          nextState[x][y] = 'wall';
          break;
        case '@':
          nextState[x][y] = 'player';
          player.x = x;
          player.y = y;
          break;
  +     case 'B':
  +       nextState[x][y] = 'box';
  +       break;
    }
  }</code></pre>

  And we need to add the associated CSS class.

  <pre><code class="language-diff-css diff-highlight">#grid {
    /* omitted for brevity */

    .wall {
      background: url('wall.png') center/100%;
    }
    .player {
      background: url('player.png') center/100%;
    }
  + .box {
  +   background: url('box.png') center/100%;
  + }
  }</code></pre>

  Save and reload to see boxes! Not bad. You'll notice that at this point, boxes behave like walls. This is because our collision detection code just checks for the presence of _anything_ in the target cell. We can update the logic to distinguish between walls and boxes.

  <pre><code class="language-diff-javascript diff-highlight">const state = Waffle.state;

  if (Waffle.isEmpty(state[playerNext.x][playerNext.y])) {
    // remove from the old position
    state[player.x][player.y] = '';

    // update position data
    player.x = playerNext.x;
    player.y = playerNext.y;

    // put player in new position
    state[player.x][player.y] = 'player';
  + } else if (state[playerNext.x][playerNext.y] === 'box') {
  + // determine the box's next position
  + const boxNext = {
  +   x: playerNext.x + move.x,
  +   y: playerNext.y + move.y
  + };
  +
  + // is next position for the box open?
  + if (Waffle.isEmpty(state[boxNext.x][boxNext.y])) {
  +   // move the box
  +   state[boxNext.x][boxNext.y] = 'box';
  +
  +   // move the player (same as above)
  +   // the player will overwrite the box's previous position
  +   state[player.x][player.y] = '';
  +
  +   player.x = playerNext.x;
  +   player.y = playerNext.y;
  +
  +   state[player.x][player.y] = 'player';
  + } else {
  +   console.log(`Can't move box; blocked by ${state[boxNext.x][boxNext.y]}`);
  + }
  }

  // update the game
  Waffle.state = state;</code></pre>



  ----------------

  1. Draw walls
  2. Draw player
  3. Player movement
  4. Draw boxes/goals
  5. Move boxes
  6. Win condition/reset

  ```javascript
  const rows = 10;
  const columns = 10;

  Waffle.init(rows, columns);

  // hard code the level
  const level = [
    ['#','#','#','#','#',' ',' ',' ',' ',' '],
    ['#','@',' ',' ','#',' ','#','#','#',' '],
    ['#',' ','B','B','#',' ','#','x','#',' '],
    ['#',' ','B',' ','#',' ','#','x','#',' '],
    ['#','#','#',' ','#','#','#','x','#',' '],
    [' ','#','#',' ',' ',' ',' ',' ','#',' '],
    [' ','#',' ',' ',' ','#',' ',' ','#',' '],
    [' ','#',' ',' ',' ','#','#','#','#',' '],
    [' ','#','#','#','#','#',' ',' ',' ',' '],
    [' ',' ',' ',' ',' ',' ',' ',' ',' ',' '],
  ];

  const player = {x: 0, y: 0};

  // waffle is so simple that it doesn't have a way to persist overlapping
  // objects. The moving object overwrites whatever was there previously. In sokoban,
  // this is a problem because both the player and boxes can move over top of box targets,
  // which need to re-appear if the player or box moves back off again. Therefore, we need
  // to store the location of targets in a separate data structure instead of just in `Waffle.state`
  const targets = [];

  const nextState = Waffle.state;

  for (let x = 0; x < Waffle.columns; x += 1) {
    for (let y = 0; y < Waffle.rows; y += 1) {
      // note the reversed order of x and y
      // allows us to have a 2d array that looks the same in the code
      const cell = level[y][x];

      // evaluate the simplifed text contents of the level
      // and set the state of the grid
      switch (cell) {
        case 'B':
          nextState[x][y] = 'box';
          break;
        case '#':
          nextState[x][y] = 'wall';
          break;
        case 'x':
          nextState[x][y] = 'target';
          targets.push({x, y});
          break;
        case '@':
          nextState[x][y] = 'player';
          player.x = x;
          player.y = y;
          break;
      }
    }
  }

  Waffle.state = nextState;

  Waffle.onKeyDown(({ key }) => {
    const move = {x: 0, y: 0};

    switch (key) {
      case 'w':
        move.y -= 1;
        break;
      case 's':
        move.y += 1;
        break;
      case 'a':
        move.x -= 1;
        break;
      case 'd':
        move.x += 1;
        break;
    }

    const playerNext = {
      x: player.x + move.x,
      y: player.y + move.y
    };

    const state = Waffle.state;

    // TODO: not sure this makes things clearer; uses scope access of `state` variable
    const movePlayer = (destination) => {
      // remove the player from the old position
      state[player.x][player.y] = '';

      // update location data
      player.x = destination.x;
      player.y = destination.y;

      // put player in new position
      state[player.x][player.y] = 'player';
    };

    if (canMoveTo(playerNext)) {
      movePlayer(playerNext);
    } else if (state[playerNext.x][playerNext.y] === 'box') {

      // figure out if the box is blocked or not
      const boxNext = {
        x: playerNext.x + move.x,
        y: playerNext.y + move.y
      };

      if (canMoveTo(boxNext)) {
        // move the box
        state[boxNext.x][boxNext.y] = 'box';

        // the player will overwrite the box's previous position
        movePlayer(playerNext);
      } else {
        console.log(`Can't move box; blocked by ${state[boxNext.x][boxNext.y]}`);
      }
    }

    // ensure targets are re-displayed if player/box moves off them
    for (const t of targets) {
      if (Waffle.isEmpty(state[t.x][t.y])) {
        state[t.x][t.y] = 'target';
      }
    }

    Waffle.state = state;

    if (hasWonGame()) {
      alert('u win');
    }
  });

  const canMoveTo = (point) => {
    const state = Waffle.state;

    return Waffle.isEmpty(state[point.x][point.y]) || state[point.x][point.y] === 'target';
  };

  const hasWonGame = () => {
    const state = Waffle.state;

    return targets.every(t => state[t.x][t.y] === 'box');
  };
  ```
